package org.gesis.datacube;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;

import org.gesis.discovery.Variable;
import org.gesis.rdfs.Resource;

/**
 * A DataSet represents aggregate data such as multi-dimensional tables.
 * Aggregate data is derived from microdata by statistics on groups, or
 * aggregates such as counts, means, or frequencies. Data cubes are often
 * generated by tabulating or aggregating unit-record datasets. For example, if
 * an observation in a census data cube indicates the population of a certain
 * age group in a certain region is 12345, then this fact was obtained by
 * aggregating that number of individual records from a unit-record dataset.
 * Disco contains a property "aggregation" that indicates that a Cube dataset
 * was derived by tabulating a unit-record dataset. Data Cube provides for the
 * description of the structure of such cubes, but also for the representation
 * of the cube data itself, that is, the observations that make up the cube
 * dataset.
 * <p>
 * The RDF Data Cube Vocabulary is a W3C standard for representing data cubes,
 * i.e multidimensional aggregate data. While Disco and Data Cube provide terms
 * for the description of datasets, both on a different level of aggregation,
 * DCAT enables the representation of these datasets inside of data collections
 * like repositories, catalogs or archives. The relationship between data
 * collections and their contained datasets is useful, since such collections
 * are a typical entry point when searching for data.
 * </p>
 * 
 * @author matthaeus
 * @see <a href=
 *      "http://rdf-vocabulary.ddialliance.org/discovery.html#rdf-data-cube-vocabulary-qb">Definition:
 *      RDF DataCube vocabulary</a>
 * @see org.gesis.discovery.LogicalDataSet
 */
@Entity
@Inheritance( strategy = InheritanceType.JOINED )
public class DataSet extends Resource
{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	// relations

	@ManyToMany( cascade = CascadeType.ALL, fetch = FetchType.LAZY )
	@JoinTable(
			name="DataSet_Variable",
			joinColumns=@JoinColumn(name="dataSet_id"),
			inverseJoinColumns=@JoinColumn( name = "variable_id" ))
	protected List<Variable> inputVariable;

	// getter/setter

	/**
	 * @return The list of Variables this DataSet is attached to.
	 * @see org.gesis.discovery.Variable
	 */
	public List<Variable> getInputVariable()
	{
		return this.inputVariable;
	}

	/**
	 * Corresponds to disco:inputVariable.
	 * 
	 * @param inputVariables
	 * @return This DataSet object.
	 */
	public DataSet setInputVariable( final List<Variable> inputVariables )
	{
		this.inputVariable = inputVariables;
		return this;
	}

}